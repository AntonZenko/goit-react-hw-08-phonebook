{"version":3,"file":"static/js/87.c35a0a35.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.section`\n  padding-top: 20px;\n  text-align: center;\n`;\n\nexport const Title = styled.h3`\n  margin: 0;\n  font-size: 18px;\n  font-weight: 500;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Container, Title } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <Container>\n      <Title>{title}</Title>\n      {children}\n    </Container>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\nimport { TextField, Button } from '@mui/material';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 30%;\n  margin: 0 auto;\n  // align-items: center;\n`;\n\nexport const Field = styled(TextField)`\n  font-size: 16px;\n\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Btn = styled(Button)`\n  color: #94d1c4;\n  &:hover {\n  }\n`;\n\n// export const Input = styled.input`\n//   padding: 8px;\n//   font-size: 16px;\n//   border: 1px solid #ebebeb;\n//   box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n//   :not(:last-child) {\n//     margin-bottom: 10px;\n//   }\n//   :focus,\n//   :hover {\n//     outline: none;\n//     border: 1px solid #4cbafc;\n//   }\n// `;\n\n// export const Label = styled.label`\n//   margin-bottom: 5px;\n//   text-align: start;\n//   font-size: 14px;\n//   font-weight: 500;\n//   text-transform: uppercase;\n// `;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { contactsSelectors, contactsOperations } from '../redux/contact';\nimport { Form, Field, Btn } from './ContactForm.styled';\n// import TextField from '@mui/material/TextField';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleChange = event => {\n    const { name } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(event.currentTarget.value);\n        break;\n\n      case 'number':\n        setNumber(event.currentTarget.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (contacts?.length > 0) {\n      if (contacts.some(item => item.name === name)) {\n        return Notify.warning(`${name} is already in contacts`, {\n          timeout: 1500,\n        });\n      }\n      if (contacts.some(item => item.number === number)) {\n        return Notify.warning(`${number} is already in contacts`, {\n          timeout: 1500,\n        });\n      }\n    }\n    dispatch(contactsOperations.createNewContact({ name, number }));\n    reset();\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Field\n        label=\"Name\"\n        placeholder=\"Tony Stark\"\n        multiline\n        variant=\"standard\"\n        required\n        type=\"text\"\n        name=\"name\"\n        id={nameInputId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        value={name}\n        onChange={handleChange}\n      />\n      <Field\n        label=\"Phone number\"\n        placeholder=\"+38 (000) 000-00-00\"\n        multiline\n        variant=\"standard\"\n        required\n        type=\"tel\"\n        name=\"number\"\n        id={numberInputId}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        value={number}\n        onChange={handleChange}\n      />\n\n      <Btn variant=\"contained\" size=\"small\" color=\"secondary\" type=\"submit\">\n        Add new Contact\n      </Btn>\n    </Form>\n  );\n}\n","import styled from 'styled-components';\nimport TextField from '@mui/material/TextField';\n\nexport const Input = styled.input`\n  padding: 8px;\n  font-size: 16px;\n  border: 1px solid #ebebeb;\n  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n  margin-bottom: 20px;\n  :focus,\n  :hover {\n    outline: none;\n    border: 1px solid #4cbafc;\n  }\n`;\n\nexport const Label = styled.label`\n  margin-right: 15px;\n  text-align: start;\n  font-size: 14px;\n  font-weight: 500;\n  text-transform: uppercase;\n`;\n\nexport const Field = styled(TextField)`\n  font-size: 16px;\n  width: 30%;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n","import { Field } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterSelector } from '../redux/filter';\nimport { changeFilter } from '../redux/filter/filter-slice';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(filterSelector);\n\n  const handleChange = e => {\n    dispatch(changeFilter(e));\n  };\n\n  return (\n    <>\n      <Field\n        label=\"Find contacts by name\"\n        placeholder=\"Steve Rogers\"\n        multiline\n        variant=\"standard\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={event => handleChange(event.target.value)}\n      />\n    </>\n  );\n}\n\nexport default Filter;\n","import styled from 'styled-components';\nimport Button from '@mui/material/Button';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 18px;\n  padding: 8px 20px 8px 10px;\n  border-bottom: 1px solid #071e22;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Name = styled.span`\n  color: #071e22;\n  font-weight: 500;\n  margin-right: 15px;\n`;\nexport const Number = styled.span`\n  margin-right: auto;\n  color: #071e22;\n`;\nexport const qButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #085380;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  padding: 4px 10px;\n  :hover {\n    background-color: #4cbafc;\n    color: #292929;\n    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nexport const Btn = styled(Button)`\n  color: #94d1c4;\n  &:hover {\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { contactsOperations } from '../redux/contact';\nimport PropTypes from 'prop-types';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Loader from '../Loader/Loader';\n// import Skeleton from '@mui/material/Skeleton';\n// import Box from '@mui/material/Box';\n\nimport { Item, Name, Number, Btn } from './ContactListItem.styled';\n\nfunction ContactListItem({ name, number, id }) {\n  const dispatch = useDispatch();\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const isLoading = false;\n\n  const handelDeleteContact = id => {\n    setIsDeleting(true);\n    dispatch(contactsOperations.deleteContact(id)).finally(() => {\n      setIsDeleting(false);\n    });\n  };\n\n  return (\n    <Item>\n      <Name>{name}:</Name>\n      <Number>{number}</Number>\n\n      {!isDeleting ? (\n        <Btn\n          type=\"button\"\n          variant=\"contained\"\n          size=\"medium\"\n          color=\"secondary\"\n          disabled={isLoading}\n          onClick={() => {\n            handelDeleteContact(id);\n            Notify.success(`Contact ${name} deleted!`, {\n              timeout: 1500,\n            });\n          }}\n        >\n          Delete\n        </Btn>\n      ) : (\n        // <Box sx={{ width: '100%' }}>\n        //   <Skeleton animation=\"wave\" />\n        // </Box>\n        <Loader isLoading={isDeleting} spinner={true} />\n      )}\n    </Item>\n  );\n}\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0 auto;\n  list-style: none;\n  width: 60%;\n`;\n\nexport const Message = styled.li`\n  text-align: center;\n  font-size: 24px;\n  margin: 20px auto;\n  width: 60%;\n`;\n","import ContactListItem from '../ContactListItem/ContactListItem';\nimport { List, Message } from './ContactList.styled';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from '../redux/contact';\nimport { filterSelector } from '../redux/filter';\n\nfunction ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors);\n  const filter = useSelector(filterSelector);\n\n  useEffect(() => {\n    dispatch(contactsOperations.getUserContacts());\n  }, [dispatch]);\n\n  return (\n    <List>\n      {contacts ? (\n        (filter\n          ? contacts.filter(contact =>\n              contact.name.toLowerCase().includes(filter.toLowerCase())\n            )\n          : contacts\n        ).map(({ id, name, number }) => (\n          <ContactListItem key={id} id={id} name={name} number={number} />\n        ))\n      ) : (\n        <Message>Your phonebook is empty. Please add contact.</Message>\n      )}\n    </List>\n  );\n}\n\nexport default ContactList;\n","import Section from '../../Section/Section';\nimport ContactForm from '../../ContactForm/ContactForm';\nimport Filter from '../../Filter/Filter';\nimport ContactList from '../../ContactList/ContactList';\n\nexport default function Contacts() {\n  return (\n    <>\n      <Section title=\"Create new contact\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n      </Section>\n      <Section title=\"Contact List\">\n        <ContactList />\n      </Section>\n    </>\n  );\n}\n"],"names":["Container","styled","Title","title","children","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Form","Field","TextField","Btn","Button","ContactForm","dispatch","useDispatch","contacts","useSelector","contactsSelectors","useState","name","setName","number","setNumber","nameInputId","numberInputId","handleChange","event","currentTarget","value","reset","onSubmit","preventDefault","length","some","item","Notify","timeout","contactsOperations","label","placeholder","multiline","variant","required","type","pattern","onChange","color","filter","filterSelector","e","target","changeFilter","Item","Name","Number","isDeleting","setIsDeleting","Loader","isLoading","spinner","disabled","onClick","finally","handelDeleteContact","List","Message","useEffect","contact","toLowerCase","includes","map","Contacts"],"sourceRoot":""}