{"version":3,"file":"static/js/54.7bbb1c75.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.styled.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.section`\n  padding-top: 30px;\n  text-align: center;\n`;\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  font-weight: 500;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Container, Title } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <Container>\n      <Title>{title}</Title>\n      {children}\n    </Container>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","// import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 30%;\n  margin: 0 auto;\n  // align-items: center;\n`;\nexport const Input = styled.input`\n  padding: 8px;\n  font-size: 16px;\n  border: 1px solid #ebebeb;\n  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n  :focus,\n  :hover {\n    outline: none;\n    border: 1px solid #4cbafc;\n  }\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 5px;\n  text-align: start;\n  font-size: 14px;\n  font-weight: 500;\n  text-transform: uppercase;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #085380;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  padding: 4px 10px;\n  :hover {\n    background-color: #4cbafc;\n    color: #292929;\n    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nexport const BtnWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 10px;\n`;\n","import styled from 'styled-components';\nimport { RotatingLines } from 'react-loader-spinner';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 30px;\n  border: none;\n`;\n\nexport const Spinner = styled(RotatingLines)`\n  transform: translate(-50%, -50%);\n`;\n","import { Spinner, LoaderContainer } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderContainer>\n      <Spinner\n        strokeColor=\"grey\"\n        strokeWidth=\"4\"\n        animationDuration=\"0.75\"\n        width=\"26\"\n        visible={true}\n      />\n    </LoaderContainer>\n  );\n}\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { contactsSelectors, contactsOperations } from '../redux/contact';\nimport { Form, Input, Button, Label, BtnWrapper } from './ContactForm.styled';\nimport Loader from 'components/Loader/Loader';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const isLoading = false;\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleChange = event => {\n    const { name } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(event.currentTarget.value);\n        break;\n\n      case 'number':\n        setNumber(event.currentTarget.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (contacts?.length > 0) {\n      if (contacts.some(item => item.name === name)) {\n        return Notify.warning(`${name} is already in contacts`);\n      }\n      if (contacts.some(item => item.number === number)) {\n        return Notify.warning(`${number} is already in contacts`);\n      }\n    }\n\n    dispatch(contactsOperations.createNewContact({ name, number }));\n    reset();\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor={nameInputId}>Name</Label>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer.\"\n        required\n        id={nameInputId}\n        value={name}\n        onChange={handleChange}\n      />\n      <Label htmlFor={numberInputId}>Number</Label>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        id={numberInputId}\n        value={number}\n        onChange={handleChange}\n      />\n      {isLoading ? (\n        <BtnWrapper>\n          <Loader />\n        </BtnWrapper>\n      ) : (\n        <Button type=\"submit\">Add new Contact</Button>\n      )}\n    </Form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  padding: 8px;\n  font-size: 16px;\n  border: 1px solid #ebebeb;\n  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n  margin-bottom: 20px;\n  :focus,\n  :hover {\n    outline: none;\n    border: 1px solid #4cbafc;\n  }\n`;\n\nexport const Label = styled.label`\n  margin-right: 15px;\n  text-align: start;\n  font-size: 14px;\n  font-weight: 500;\n  text-transform: uppercase;\n`;\n","import { nanoid } from 'nanoid';\nimport { Label, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterSelector } from '../redux/filter';\nimport { changeFilter } from '../redux/filter/filter-slice';\n\nfunction Filter() {\n  const inputId = nanoid();\n  const dispatch = useDispatch();\n  const filter = useSelector(filterSelector);\n\n  const handleChange = e => {\n    dispatch(changeFilter(e));\n  };\n\n  return (\n    <>\n      <Label htmlFor={inputId}>Find contacts by name</Label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={event => handleChange(event.target.value)}\n      />\n    </>\n  );\n}\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 18px;\n  padding: 8px 20px 8px 10px;\n  border: 1px solid #bfbfbf;\n  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Name = styled.span`\n  font-weight: 500;\n  margin-right: 15px;\n`;\nexport const Number = styled.span`\n  margin-right: auto;\n`;\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 30px;\n  border: none;\n  color: #fff;\n  background-color: #085380;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  padding: 4px 10px;\n  :hover {\n    background-color: #4cbafc;\n    color: #292929;\n    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { contactsOperations } from '../redux/contact';\nimport PropTypes from 'prop-types';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Loader from '../Loader/Loader';\n\nimport { Item, Name, Number, Button } from './ContactListItem.styled';\n\nfunction ContactListItem({ name, number, id }) {\n  const dispatch = useDispatch();\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const isLoading = false;\n\n  const handelDeleteContact = id => {\n    setIsDeleting(true);\n    dispatch(contactsOperations.deleteContact(id)).finally(() => {\n      setIsDeleting(false);\n    });\n  };\n\n  return (\n    <Item>\n      <Name>{name}:</Name>\n      <Number>{number}</Number>\n      {isDeleting ? (\n        <Loader />\n      ) : (\n        <Button\n          type=\"button\"\n          disabled={isLoading}\n          onClick={() => {\n            handelDeleteContact(id);\n            Notify.success(`Contact ${name} deleted!`);\n          }}\n        >\n          Delete\n        </Button>\n      )}\n    </Item>\n  );\n}\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0 auto;\n  list-style: none;\n  width: 60%;\n`;\n\nexport const Message = styled.li`\n  text-align: center;\n  font-size: 24px;\n  margin: 20px auto;\n  width: 60%;\n`;\n","import ContactListItem from '../ContactListItem/ContactListItem';\nimport { List, Message } from './ContactList.styled';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from '../redux/contact';\nimport { filterSelector } from '../redux/filter';\n\nfunction ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors);\n  const filter = useSelector(filterSelector);\n\n  useEffect(() => {\n    dispatch(contactsOperations.getUserContacts());\n  }, [dispatch]);\n\n  return (\n    <List>\n      {contacts ? (\n        (filter\n          ? contacts.filter(contact =>\n              contact.name.toLowerCase().includes(filter.toLowerCase())\n            )\n          : contacts\n        ).map(({ id, name, number }) => (\n          <ContactListItem key={id} id={id} name={name} number={number} />\n        ))\n      ) : (\n        <Message>Your phonebook is empty. Please add contact.</Message>\n      )}\n    </List>\n  );\n}\n\nexport default ContactList;\n","import Section from '../../Section/Section';\nimport ContactForm from '../../ContactForm/ContactForm';\nimport Filter from '../../Filter/Filter';\nimport ContactList from '../../ContactList/ContactList';\n\nexport default function Contacts() {\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n      </Section>\n      <Section title=\"Contact List\">\n        <ContactList />\n      </Section>\n    </>\n  );\n}\n"],"names":["Container","styled","Title","title","children","Form","Input","Label","Button","LoaderContainer","Spinner","RotatingLines","Loader","strokeColor","strokeWidth","animationDuration","width","visible","ContactForm","dispatch","useDispatch","contacts","useSelector","contactsSelectors","useState","name","setName","number","setNumber","nameInputId","nanoid","numberInputId","handleChange","event","currentTarget","value","reset","onSubmit","preventDefault","length","some","item","Notify","contactsOperations","htmlFor","type","pattern","required","id","onChange","inputId","filter","filterSelector","e","target","changeFilter","Item","Name","Number","isDeleting","setIsDeleting","disabled","onClick","finally","handelDeleteContact","List","Message","useEffect","contact","toLowerCase","includes","map","Contacts"],"sourceRoot":""}